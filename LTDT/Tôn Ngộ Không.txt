
#include<stdio.h>
#define max_vertices 100
#define max_edges 500
#define MaxLength 100
typedef int ElementType;
typedef int Position;
typedef struct{
	ElementType Elements[MaxLength];
	Position Last; 
}List;

void MakeNull_List(List *L) {
	L->Last = 0;
}

int Empty_List(List L) {
	return L.Last == 0;
}

int Full_List(List L) {
 	return L.Last == MaxLength;
}

Position First(List L) {
	return 1;
}

Position EndList(List L) {
	return L.Last + 1;
}

Position Next(Position P, List L) {
	return P + 1;
}


ElementType Retrieve(Position P, List L) {
	return L.Elements[P-1];
}

void Insert_List(ElementType X,Position P, List *L) {
	if (L->Last==MaxLength)
		printf("Danh sach day");
 	else if ((P<1) || (P>L->Last+1))
 	printf("Vi tri khong hop le");
	else {
		Position Q;
	for(Q=(L->Last-1)+1;Q>=P;Q--)
		L->Elements[Q]=L->Elements[Q-1];
		 //Ðua x vào v? trí p
 	L->Elements[P-1]=X;
	 //Tang d? dài danh sách lên 1
 	L->Last++;
}
}

void Delete_List(Position P,List *L) {
 if ((P<1) || (P>L->Last))
 printf("Vi tri khong hop le");
 else if (Empty_List(*L))
 printf("Danh sach rong!");
 else {
Position Q;
/*D?i các pht? t? v? trí p+1 d?n cu?i
 danh sách ra tru?c 1 v? trí*/
for(Q=P-1;Q<L->Last-1;Q++)
 L->Elements[Q]=L->Elements[Q+1];
L->Last--;
 }
 }
 
Position Locate(ElementType X, List L) {
Position P;
int Found = 0;
P = First(L);
while ((P != EndList(L)) && (Found == 0))
if (Retrieve(P,L) == X) Found = 1;
else P = Next(P, L);
return P;
}

void PrintList(List L) {
Position P;
P = First(L);
while (P != EndList(L)) {
ElementType data;
 data = Retrieve(P,L);
 printf("%d ", data);
P = Next(P, L);
}
printf("\n");
}

typedef int ElementType; 
typedef struct{
	ElementType Elements[MaxLength];
	int Front, Rear; 
}Queue;
void MakeNull_Queue(Queue *Q) {
	Q->Front=-1;
	Q->Rear=-1;
}

int Empty_Queue(Queue Q) {
	return (Q.Front ==-1);
}

int Full_Queue(Queue Q) {
	return ((Q.Rear-Q.Front+1)==MaxLength);
}

ElementType Front(Queue Q) {
	
	    return Q.Elements[Q.Front];
}

void DeQueue(Queue *Q) {
	if (!Empty_Queue(*Q)) {
		Q->Front = Q->Front+1;
		if (Q->Front>Q->Rear)
			MakeNull_Queue(Q);
 	}
 	else
 		printf("Loi: Hang rong!");
}

void EnQueue(ElementType X,Queue *Q) {
	if (!Full_Queue(*Q)) {
		if (Empty_Queue(*Q)) Q->Front=0;
		if (Q->Rear==MaxLength-1) {
 		int i;
		for(i=Q->Front; i<=Q->Rear; i++)
			Q->Elements[i-Q->Front]=Q->Elements[i];
		Q->Rear=MaxLength - Q->Front-1;
		Q->Front=0;
		}
		Q->Rear=Q->Rear+1;
		Q->Elements[Q->Rear]=X;
	}
	else printf("Loi: Hang day!");
}

void PrintQueue(Queue Q){
	int data;
	while(!Empty_Queue(Q)){
		data = Front(Q);
		printf("%d ",data);
		DeQueue(&Q);
	}
}

typedef struct{
	int n, m; //n dinh m cung
	int A[max_vertices][max_edges];
	
}Graph;
	//khoi tao do thi
void init_graph(Graph *G, int n, int m){
	int i, j;
	G->n = n;
	G->m = m;
	for(i = 1; i <= n; i++){
		for(j = 1; j <= m; j++){
			G->A[i][j] = 0;
		}
	}
}
void add_top(Graph* G, int x, int y){
	G->A[x][y]=1;
	G->A[y][x]=1;
}

int adjacent_top(Graph *G, int x, int y){
	return G->A[x][y] == 1;
}

List neighbors(Graph G, int x){
int i;	List L;
	MakeNull_List(&L);
	for(i = 1; i <= G.n; i++){
		if((i != x) && (adjacent_top(&G,i,x) == 1)){
			Insert_List(i,EndList(L),&L);
		}
	}
	return L;
}

void breath_first_search(Graph G){
	Queue Q;
//	List L;
	int mark[100];
	MakeNull_Queue(&Q);
	int j, i;
	for(j = 1; j <= G.n; j++) mark[j] = 0;
	EnQueue(1,&Q);
	mark[1] = 1;
			while(!Empty_Queue(Q)){
				int x = Front(Q); DeQueue(&Q);
			//	printf("%d\n",x);
				List L = neighbors(G,x);
				for(i = 1; i <= L.Last; i++){
					int y = Retrieve(i,L);
					if(mark[y] == 0){
						mark[y] = 1;
						EnQueue(y,&Q);
					}
				}
			}
		
	
	for(i = 1; i <= G.n; i++){
	    if(mark[i] == 0){
	        printf("KHONG");
	        break;}
	}
	if(i > G.n) printf("DUOC");
}

int main(){
Graph G;
int n, m, u, v, e;
scanf("%d %d", &n, &m); //Doc du lieu
init_graph(&G, n, n);
for (e = 1; e <= n; e++) {
scanf("%d%d", &u, &v);
add_top(&G, u, v);
}
//show(G);
//List L;
//L = neighbors(G,2);
//PrintList(L);
breath_first_search(G);
	return 0;
}