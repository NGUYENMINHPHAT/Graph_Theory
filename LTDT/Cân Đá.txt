#include <stdio.h>
#define MAX_VERTICES 100
#define MAX_ELEMENTS 100
typedef int ElementType;
int rank[MAX_VERTICES];
//khai bao cau truc list
typedef struct {
ElementType data[MAX_ELEMENTS];
int size;
} List;
typedef struct {
int data[MAX_ELEMENTS];
int front, rear;
} Queue;
//khoi bao cau truc di thi
typedef struct {
int A[MAX_VERTICES][MAX_VERTICES];
int n,m;
} Graph;
void make_null_list(List* L) {
L->size = 0;
}
/* Them mot phan tu vao cuoi danh sach */
void push_back(List* L, ElementType x) {
L->data[L->size] = x;
L->size++;
}
/* Lay phan tu tai vi tri i, phan tu bat dau o vi tri 1 */
ElementType element_at(List* L, int i) {
return L->data[i-1];
}
/* Tra ve so phan tu cua danh sach */
int count_list(List* L) {
return L->size;
}
void make_null_queue(Queue *Q) {
Q->front = 0;
Q->rear = -1;
}
void push(Queue* Q, int x) {
Q->rear++;
Q->data[Q->rear] = x;
}
int top(Queue* Q) {
return Q->data[Q->front];
}
void pop(Queue* Q) {
Q->front++;
}
int empty(Queue* Q) {
return Q->front > Q->rear;
}
/* phan do thi */
void init_graph(Graph *G,int n){
int i,j;
G->n = n;
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
G->A[i][j]=0;
}
void add_edge(Graph *G, int x,int y){
G->A[x][y]=1;
}
int adjacent(Graph *G, int x, int y){
return G->A[x][y] != 0;
}
int degree(Graph *G,int x){
int y,deg=0;
for(y=1; y<= G->n; y++)
deg+= G->A[x][y];
return deg;
}
List neighbors(Graph *G, int x){
int y;
List list;
make_null_list(&list);
for(y=1;y<=G->n;y++)
if(adjacent(G,x,y))
push_back(&list,y);
return list;
}
void copy_list(List *S1, List *S2){
int i, x;
make_null_list(S1);
for(i=1;i<=S2->size;i++){
x=element_at(S2,i);
push_back(S1,x);
}
}
List topo_sort(Graph *G){
int d[MAX_VERTICES];
int x, u;
int k = 1, i;
for(u = 1; u <= G->n; u++){
d[u] = 0;
// rank[u] = 0;
}
for(x = 1; x <= G->n; x++)
for(u = 1; u <= G->n; u++)
if(G->A[x][u] != 0)
d[u]++;
Queue Q;
make_null_queue(&Q);
for(u = 1; u <= G->n; u++)
if(d[u] == 0)
push(&Q, u);
List L;
make_null_list(&L);
while(!empty(&Q)){
int u = top(&Q); pop(&Q);
push_back(&L, u);
int v;
for (v = 1; v <= G->n; v++)
if(G->A[u][v] != 0){
d[v]--;
if(d[v] == 0)
push(&Q, v);
}
}
return L;
}
void main (){
// freopen("dt.txt", "r", stdin);
Graph G;
int n, m, u, v, x, w, e;
scanf("%d%d", &n, &m);
init_graph(&G, n);
for (e =1 ; e <= m; e++) {
scanf("%d%d", &u, &v);
add_edge(&G, u, v);
}
List L = topo_sort(&G);
for(u=1;u<=L.size;u++)
printf("%d ",element_at(&L,u));
// return 0;
}