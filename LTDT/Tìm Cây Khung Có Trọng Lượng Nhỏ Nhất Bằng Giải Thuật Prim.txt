#include<stdio.h>
#define MAX_LENGTH 100
#define MAX_VERTICES 100
#define MAX_EDGES 500
typedef struct{
int u,v,w;
}Edge;
typedef struct{
int n,m;
int A[MAX_VERTICES][MAX_VERTICES];
}Graph;
void init_graph(Graph *G,int n){
G->n = n;
int i,j;
for(i=1; i<=n; i++)
for(j=0; j<n; j++)
G->A[i][j]=0;
}
void add_edge(Graph *G,int x, int y, int w){
G->A[x][y]+=w;
G->A[y][x]+=w;
}
void swap(Edge *a, Edge *b){
Edge t;
t=*a;
*a=*b;
*b=t;
}
int nho_hon(Edge a, Edge b){
if((a.u<b.u) || (a.u==b.u) || (a.v<b.v))
return 1;
return 0;
}
void bubble_sort(Edge e[], int n){
int i,j;
for(i=0; i<=n-1; i++)
for(j=n-1; j>i; j--)
if(nho_hon(e[j], e[j-1]))
swap(&e[j], &e[j-1]);
}
typedef struct{
int data[MAX_LENGTH];
int size;
}List;
void make_null_list(List* L){
L->size = 0;
}
int empty_list(List L){
return L.size==0;
}
void push_back(List* L, int x){
L->data[L->size] = x;
L->size++;
}
int element_at(List* L, int i){
return L->data[i-1];
}
int distancefrom(int u, List L, Graph G){
int min_dist = 9999;
int min_v = -1;
int i;
for(i=1; i<=L.size; i++){
int v = element_at(&L,i);
if(G.A[u][v]!=0 && min_dist>G.A[u][v]){
min_dist=G.A[u][v];
min_v=v;
}
}
return min_v;
}
int check(List L, int x){
int i;
for(i=1; i<=L.size; i++)
if(x==element_at(&L,i))
return 1;
return 0;
}
Edge edges[100];
int dem=0;
int mark[100];
int prim(Graph G, Graph T){

init_graph(&T, G.n);
List L;
make_null_list(&L);
int u,i,sum_w=0;
for(i=1; i<G.n; i++)
mark[i] = 0;
push_back(&L,1);
mark[1] = 1;
for(i=1; i<G.n; i++){
int min_dist=9999, min_u, min_v;
for(u=1; u<=G.n; u++)
if(mark[u]==0){
int v = distancefrom(u,L,G);
if(v!=-1 && G.A[u][v]<min_dist){
min_dist = G.A[u][v];
min_u = u;
min_v = v;
edges[dem].u = v;
edges[dem].v = u;
edges[dem].w = min_dist;
dem++;
}
}
push_back(&L, min_u);
mark[min_u]=1;
add_edge(&T, min_u, min_v, min_dist);
sum_w += min_dist;
}
return sum_w;
}
int main(){
Graph G,T;
int e,w,v,n,m,u,i;
//freopen("dothi.txt","r",stdin);
scanf("%d%d", &n, &m);
init_graph(&G,n);
for(e=0; e<m; e++){
scanf("%d%d%d", &u, &v, &w);
add_edge(&G,u,v,w);}
int sum_w = prim(G,T);
printf("%d", sum_w);
bubble_sort(edges, dem);
for(i=0; i<dem; i++)
printf("\n%d %d %d", edges[i].u, edges[i].v, edges[i].w);
return 0;
}